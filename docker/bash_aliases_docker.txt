#Remove all untagged images (<none>)
docker-rmi-none() {
    # docker rmi $(docker images | grep none | awk '{print $3}');
    docker rmi $(docker images -f "dangling=true" -q)
}

#Remove all containers
docker-rm-all() {
    docker rm -vf $(docker ps -aq)
}

docker-rm-exited() {
    docker rm -vf $(docker ps -aqf "status=exited")
}

#Stop all containers
docker-stop-all() {
    docker stop $(docker ps -q)
}

#Run a container
#If CMD is not provided, uses bash, adds name in format tmp$NUMBER_OF_RUNNING_TMP_CONTS
dr() {
    cmd="bash"
    image=$1
    [ $# -ge 2 ] && shift && cmd=$@
    run="docker run --name tmp$(docker ps -a | grep tmp | wc -l)  -it --rm $image $cmd"
    echo $run
    $run
}

#Call docker load. If the image is not specified by path, use default directory
dl() {
    local path=$1
    local DEFAULT_PATH="${HOME}/devel/brew/"
    [[ "${path}" =~ ^.*/.*$ ]] || path=${DEFAULT_PATH}${path}

    docker load -i ${path}
}

#Docker exec
#Use bash as a default CMD, if no container is specified, use last container from docker ps list
de() {
    local cmd=bash
    local container=$1
    [ -z "$1" ] && container=$(docker ps | tail -1 | awk '{print $1}')
    [ "$container" == "CONTAINER" ] && >&2 echo "No running container" && return 0
    [ $# -ge 2 ] && shift && cmd=$@
    docker exec -it $container $cmd
}

#Docker inspect/ip
#Get an IP address of a container - if no container is specified, use last container from docker ps list
di() {
    local container=$1
    [ -z "$1" ] && container=$(docker ps | tail -1 | awk '{print $1}')
    [ "$container" == "CONTAINER" ] && >&2 echo "No running container" && return 0
    docker inspect $container | jq -r .[0].NetworkSettings.IPAddress
}

#Docker kill
#Kill the specified container, if no container is specified, use last container from docker ps list
dk() {
    local container=$1
    [ -z "$1" ] && container=$(docker ps | tail -1 | awk '{print $1}')
    [ "$container" == "CONTAINER" ] && >&2 echo "No running container" && return 0
    docker kill $container
}

# Docker tree
# Shows all the process tree associated with the docker daemon 
docker-tree () {
   local DOCKER_PID=$(ps -fax | grep /usr/bin/docker | grep -v grep | awk '{ print $1}')
   ps f -p $(pstree -p $DOCKER_PID | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr "\n" " ")
}


#Build docker image in current directory
docker-build() {
    local tag=$1
    [ -z "$1" ] && echo "you must specify the tag" && return 0
    docker build --rm -t $tag .
}


# Print contents of json file in pretty print format
json-print() {
   local file=$1
   shift
   cat ${file} | python -m json.tool $@
}

alias dockercleanup='docker rm $(docker ps -a | awk '\''/Exited/ { print $1 }'\'')'
alias dockerimagesdf='docker images | awk '\''/MB/ { SUM += $7 } END { print SUM }'\'''
